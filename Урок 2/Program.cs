/*
1. Константные алгоритмы (сумма чисел от 1 до n) - 0 (1)
2. Линейный алгоритм (сумма чисел от 1 до n) - O(n)
3. Квадратичные алгоритмы (сортировка пузырьком, выбором, вставками) - O(n^2 )
4. Логарифмические алгоритмы (бинарный поиск) - O(log2(n))
5. Линейно-логарифмические алгоритмы (быстрая сортировка) - O(n * log2(n))
6. Кубические алгоритмы (заполнение 3х мерного массива)
Сложность алгоритма - это кол-во действий, которые необходимо выполнить, для получения конечного результатаб
*/

// 1. O(1)
Console.Clear();
System.Console.WriteLine("Введите число");
int n = int.Parse(Console.ReadLine()!);
// System.Console.WriteLine($"Результат: {(1 + n) / 2.0 * n}");
// (1 + 10) / 2 = 5
// 2. O(n)
int result = 0;
for (int i = 1; i <= n ; i++)
{
    result += i;
}
System.Console.WriteLine($"Результат: {result}");


// 4. Загадали число 67
// -> 1 (лучший вариант)
// -> 100 (худший вариант)
// от 1 до 100
// 50? - да. Диапазон от 50 до 100
// 75? - нет. Диапазон от 50 до 75
// 62? - да. Диапазон от 62 до 75
// 68? - нет. Диапазон от 62 до 68
// 65? - да. Диапазон от 65 до 68
// 66? - да. Диапазон от 66 до 68
// 67? - нет. = 67
// O(log2(n)) -> log2(100) -> 7
// 1000 -> 10 попыток
// 2000 -> 11 попыток

// 5. O(n * log2(n))
// [4, 21, -3, 56, 78, 5]
// Опорный элемент = 4
// [-3] + [4] + [21, 56, 78, 5]
// [21, 56, 78, 5]
// Опорный эелемент = 21
// [5] + [21] + [56, 78]
// [-3] + [4] + [5] + [21]
// Опорный элемент = 56
// [] + [56] + [78]
// [-3] + [4] + [5] + [21] + [56] + [78]

// 3. O(n ^ 2)
/*
[4, 21, -3, 56, 78, 5]
4 < 21
21 < -3 !!! -3 <-> 21
[4, -3, 21, 56, 78, 5]
21 < 56
56 < 78
78 < 5 !!! 5 <-> 78
[4, -3, 21, 56, 5, 78]
4 < -3 !!! -3 <-> 4
[-3, 4, 21, 56, 5, 78]
4 < 21
21 < 56
56 < 5 !!! 5 <-> 56
[-3, 4, 21, 5, 56, 78]
56 < 78
-3 < 4
4 < 21
21 < 5 !!! 5 <-> 21
[-3, 4, 5, 21, 56, 78]
*/
